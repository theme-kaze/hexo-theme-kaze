<head>
  <meta charset="UTF-8">
  <meta 
    name="viewport"
    content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
  <meta 
    http-equiv="X-UA-Compatible" 
    content="ie=edge">
  <meta 
    name="theme-color" 
    content="#fff" 
    id="theme-color">
  <meta 
    name="description" 
    content="<%= config.description || config.title || theme.title %>">
  <link 
    rel="icon" 
    href="<%= url_for(theme.logo_img) %>">
  <title><%- page.title || theme.title %></title>
  <% if(theme.og && theme.og.enable) { %>
    <% if(theme.og.title) { %>
      <meta 
        property="og:title" 
        content="<%= page.title || theme.title || config.title %>">
    <% } %>
    <% if(theme.og.url) { %>
      <meta 
        property="og:url" 
        content="<%= url %>">
    <% } %>
    <% if(theme.og.image && (page.banner_img || theme.author_img)) { %>
      <meta 
        property="og:img" 
        content="<%= page.banner_img || theme.author_img %>">
    <% } %>
    <% if(theme.og.description && (page.excerpt || theme.description || config.description)) { %>
      <meta 
        property="og:img" 
        content="<%= page.excerpt || theme.description || config.description %>">
    <% } %>
    <% if(theme.og.article && is_post()) { %>
      <meta 
        property="og:type" 
        content="article">
      <meta 
        property="og:article:published_time" 
        content="<%= date(page.date) %>">
      <meta 
        property="og:article:modified_time" 
        content="<%= date(page.updated) %>">
      <meta 
        property="og:article:author" 
        content="<%= theme.author || config.author %>">
      <% if(page.tags.data) { %>
        <% for(let item of page.tags.data) { %>
          <meta 
            property="og:article:tag" 
            content="<%= item.name %>">
        <% } %>
      <% } %>
    <% } %>
  <% } %>
  <%# preload %>
  <%- preload_css('//at.alicdn.com/t/font_1946621_i1kgafibvw.css') %>
  <%- preload_css('//at.alicdn.com/t/font_1952792_89b4ac4k4up.css') %>
  <%- preload_css(url_for('css/main.css')) %>
  <%# main css %>
  <%- ex_css(url_for('css/main.css')) %>
  <%# default icon %>
  <%- ex_css('//at.alicdn.com/t/font_1946621_i1kgafibvw.css') %>
  <%# social icon %>
  <%- ex_css('//at.alicdn.com/t/font_1952792_89b4ac4k4up.css') %>
  <% if(theme.lightbox.enable && is_post()) { %>
    <%- ex_css(url_for(theme.cdn.baguetteBox + '/baguetteBox.min.css')) %>
  <% } %>
  <script>
    function loadScript(url, cb) {
      var script = document.createElement('script');
      script.src = url;
      if (cb) script.onload = cb;
      script.async = true;
      document.body.appendChild(script);
    }
    function loadCSS(href, data, attr) {
      var sheet = document.createElement('link');
      sheet.ref = 'stylesheet';
      sheet.href = href;
      sheet.dataset[data] = attr;
      document.head.appendChild(sheet);
    }
    function changeCSS(cssFile, data, attr) {
      var oldlink = document.querySelector(data);
      var newlink = document.createElement("link");
      newlink.setAttribute("rel", "stylesheet");
      newlink.setAttribute("href", cssFile);
      newlink.dataset.prism = attr;
      document.head.replaceChild(newlink, oldlink);
    }
  </script>
  <% if(config.prismjs) { %>
    <% if(config.prismjs.enable && !config.highlight.enable) { %>
      <% let prismTheme = theme.prism.theme || 'default' %>
      <% prismTheme = (prismTheme === 'default') ? 'prism' : ('prism-' + prismTheme) %>
      <% const themeUrl = url_for(theme.cdn.prism + prismTheme + '.min.css') %>
      <% if (theme.prism.darkTheme) { %>
        <% let darkPrismTheme = theme.prism.darkTheme || 'default' %>
        <% darkPrismTheme = (darkPrismTheme === 'default') ? 'prism' : ('prism-' + darkPrismTheme) %>
        <% const darkThemeUrl = url_for(theme.cdn.prism + darkPrismTheme + '.min.css') %>
        <script>
          function prismThemeChange() {
            if(document.getElementById('theme-color').dataset.mode === 'dark') {
              if(document.querySelector('[data-prism]')) {
                changeCSS('<%- darkThemeUrl %>', '[data-prism]', '<%= darkPrismTheme %>');
              } else {
                loadCSS('<%- darkThemeUrl %>', 'prism', '<%= darkPrismTheme %>');
              }
            } else {
              if(document.querySelector('[data-prism]')) {
                changeCSS('<%- themeUrl %>', '[data-prism]', '<%= prismTheme %>');
              } else {
                loadCSS('<%- themeUrl %>', 'prism', '<%= prismTheme %>');
              }
            }
          }
          prismThemeChange()
        </script>
      <% } %>
      <% if(config.prismjs.line_number && config.prismjs.preprocess) { %>
        <% const lineUrl = theme.cdn.prism + 'prism-line-numbers.min.css' %>
        <%- ex_css(url_for(lineUrl)) %>
      <% } %>
    <% } %>
  <% } else if(theme.prism.theme) { %>
    <% console.log('INFO: your Hexo version < 5.0.0 and could not use prismjs') %>
  <% } %>
  <script>
    // control reverse button
    var reverseDarkList = {
      dark: 'light',
      light: 'dark'
    };
    var themeColor = {
      dark: '#1c1c1e',
      light: '#fff'
    }
    // get the data of css prefers-color-scheme
    var getCssMediaQuery = function() {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };
    // reverse current darkmode setting function
    var reverseDarkModeSetting = function() {
      var setting = localStorage.getItem('user-color-scheme');
      if(reverseDarkList[setting]) {
        setting = reverseDarkList[setting];
      } else if(setting === null) {
        setting = reverseDarkList[getCssMediaQuery()];
      } else {
        return;
      }
      localStorage.setItem('user-color-scheme', setting);
      return setting;
    };
    // apply current darkmode setting
  </script>
  <% if(config.prismjs && config.prismjs.enable && theme.prism && theme.prism.darkTheme) { %>
    <script>
      var setDarkmode = function(mode) {
      var setting = mode || localStorage.getItem('user-color-scheme');
      if(setting === getCssMediaQuery()) {
        document.documentElement.removeAttribute('data-user-color-scheme');
        localStorage.removeItem('user-color-scheme');
        document.getElementById('theme-color').content = themeColor[setting];
        document.getElementById('theme-color').dataset.mode = setting;
        prismThemeChange();
      } else if(reverseDarkList[setting]) {
        document.documentElement.setAttribute('data-user-color-scheme', setting);
        document.getElementById('theme-color').content = themeColor[setting];
        document.getElementById('theme-color').dataset.mode = setting;
        prismThemeChange();
      } else {
        document.documentElement.removeAttribute('data-user-color-scheme');
        localStorage.removeItem('user-color-scheme');
        document.getElementById('theme-color').content = themeColor[getCssMediaQuery()];
        document.getElementById('theme-color').dataset.mode = getCssMediaQuery();
        prismThemeChange();
      }
    };
    setDarkmode();
    </script>
  <% } else { %>
    <script>
      var setDarkmode = function(mode) {
      var setting = mode || localStorage.getItem('user-color-scheme');
      if(setting === getCssMediaQuery()) {
        document.documentElement.removeAttribute('data-user-color-scheme');
        localStorage.removeItem('user-color-scheme');
        document.getElementById('theme-color').content = themeColor[setting];
        document.getElementById('theme-color').dataset.mode = setting;
      } else if(reverseDarkList[setting]) {
        document.documentElement.setAttribute('data-user-color-scheme', setting);
        document.getElementById('theme-color').content = themeColor[setting];
        document.getElementById('theme-color').dataset.mode = setting;
      } else {
        document.documentElement.removeAttribute('data-user-color-scheme');
        localStorage.removeItem('user-color-scheme');
        document.getElementById('theme-color').content = themeColor[getCssMediaQuery()];
        document.getElementById('theme-color').dataset.mode = getCssMediaQuery();
      }
    };
    setDarkmode();
    </script>
  <% } %>
  <%# TODO: New Prefetch Plan %>
  <% if(theme.lightbox.enable) { %>
    <%- preload_js(url_for(theme.cdn.baguetteBox + '/baguetteBox.min.js')) %>
    <%- preload_css(url_for(theme.cdn.baguetteBox + '/baguetteBox.min.css')) %>
  <% } %>
  <% if(theme.lazyload.enable) { %>
    <%- preload_js(url_for(theme.cdn.lozad)) %>
  <% } %>
  <%# end preload %>
  <%# prefetch %>
  <% if(theme.latex.enable) { %>
    <% const engine = theme.latex.engine; %>
    <%- prefetch_js(theme.cdn[engine]) %>
  <% } %>
  <% if(theme.comment.enable) { %>
    <% const type = theme.comment.type; %>
    <%- prefetch_js(theme.cdn[type].js ? theme.cdn[type].js : theme.cdn[type]) %>
  <% } %>
  <%# end prefetch %>
</head>
